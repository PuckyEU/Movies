{"version":3,"file":"static/js/966.1967bbd6.chunk.js","mappings":"+RASe,SAASA,IACpB,IAAMC,GAAYC,EAAAA,EAAAA,MAAZD,QACAE,EAAY,6CAAyCF,EAAzC,kCAA0EG,EAAAA,GAAAA,KAC5F,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAMA,SAASC,IACDC,OAAOC,WAAa,KACpBC,SAASC,eAAe,QAAQC,MAAMC,UAAY,SAClDH,SAASI,iBAAiB,+BAA+BC,SAAQ,SAAAC,GAAE,OAAIA,EAAGJ,MAAMK,QAAU,OAAvB,MAEnEP,SAASC,eAAe,QAAQC,MAAMC,UAAY,SAClDH,SAASI,iBAAiB,+BAA+BC,SAAQ,SAAAC,GAAE,OAAIA,EAAGJ,MAAMK,QAAU,MAAvB,IAE1E,CAwBD,SAASC,EAAUC,GAAO,IAAD,EAErB,OAAO,IAAIC,KAAKD,EAAKE,UAAU,EAAIF,EAAKG,OAAS,IAAKC,mBAA/C,UAAkEb,SAASC,eAAe,eAA1F,aAAkE,EAAiCa,aAAa,YADzG,CAAEC,QAAS,OAAQC,KAAM,UAAWC,MAAO,OAAQC,IAAK,WAEzE,CAED,SAASC,EAAgBC,GACrB,IAAIC,EACJ,OAAQD,GACJ,KAAK,EACDC,EAAO,WACP,MACJ,KAAK,EACDA,EAAO,uBACP,MACJ,KAAK,EACDA,EAAO,aACP,MACJ,KAAK,EACDA,EAAO,UACP,MACJ,KAAK,EACDA,EAAO,WACP,MACJ,KAAK,EACDA,EAAO,KACP,MACJ,QACIC,QAAQC,MAAM,8BAEtB,OAAOF,CACV,CAED,OApEArB,SAASwB,YAAc,WACnB,OAAO,CACV,EAYD1B,OAAO2B,iBAAiB,SAAU5B,IAElC6B,EAAAA,EAAAA,MAAaC,QAAO,WAChB7B,OAAO8B,oBAAoB,SAAU/B,GACrCG,SAASC,eAAe,QAAQC,MAAMC,UAAY,QACrD,KAED0B,EAAAA,EAAAA,YAAU,WACNC,EAAAA,GAAAA,mBAAA,yCAAwB,WAAOC,GAAP,0EAChBA,EADgB,iCAEVC,EAAAA,EAAAA,KAAmBC,MAAK,WAC1BC,IAAAA,IAAU5C,GAAc2C,MAAK,SAACE,GAC1Bb,QAAQc,IAAID,EAASE,MACrB3C,EAAQyC,EAASE,KACpB,IAAEJ,MAAK,WACJrC,GAAa,EAChB,IAAE0C,OAAM,SAACC,GAAD,OAASjB,QAAQc,IAAIG,EAArB,GACZ,IAAED,OAAM,SAACC,GAAD,OAASjB,QAAQc,IAAIG,EAArB,IATO,2CAAxB,sDAYH,GAAE,CAACjD,KAmCCK,IAAa,SAAC,IAAD,UACTF,EAAK+C,QAAQC,KAAI,SAACC,EAAYC,GAAb,OACd,iBAAcC,OAAQ/C,EAAtB,WACI,gBAAKgD,UAAU,6DAAf,SAA6EH,EAAWI,cACxF,gBAAKD,UAAU,uEAAf,UACI,mBAAOF,GAAG,sBAAV,WACI,4BACA,2BACI,2CACA,0CACA,kCACA,sCACA,uCAEJ,2BACCD,EAAWK,cAAcN,KAAI,SAAChC,EAAMkC,GAAP,OAC1B,2BACI,wBAAKlC,EAAKuC,iBACV,wBAAKxC,EAAUC,EAAKwC,iBACpB,wBAAK9B,EAAgBV,EAAKW,SAC1B,wBAAKX,EAAKyC,aACV,wBAAKzC,EAAK0C,SALLR,EADiB,aAbhCA,EADI,KA8B7B,C","sources":["components/Movie Route/MovieReleases.js"],"sourcesContent":["import Layout from \"../Layout\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {auth} from \"../../firebase\";\r\nimport LoadSettingsData from \"../../LoadData\";\r\nimport axios from \"axios\";\r\nimport requests from \"../../Constants\";\r\nimport \"./Movie.css\";\r\n\r\nexport default function MovieReleases() {\r\n    let { movieId } = useParams();\r\n    const movieRequest = `https://api.themoviedb.org/3/movie/${movieId}/release_dates?api_key=${requests.key}`;\r\n    const [item, setItem] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    document.onmousedown = () => {\r\n        return true;\r\n    };\r\n\r\n    function handleScreenResize() {\r\n        if (window.innerWidth < 500) {\r\n            document.getElementById(\"root\").style.overflowX = \"scroll\";\r\n            document.querySelectorAll(\".release_dates_table_parent\").forEach(el => el.style.display = \"block\");\r\n        } else {\r\n            document.getElementById(\"root\").style.overflowX = \"hidden\";\r\n            document.querySelectorAll(\".release_dates_table_parent\").forEach(el => el.style.display = \"flex\");\r\n        }\r\n    }\r\n\r\n    window.addEventListener('resize', handleScreenResize);\r\n\r\n    useHistory().listen(() => {\r\n        window.removeEventListener('resize', handleScreenResize);\r\n        document.getElementById(\"root\").style.overflowX = \"hidden\";\r\n    });\r\n\r\n    useEffect(() => {\r\n        auth.onAuthStateChanged(async (user) => {\r\n            if (user) {\r\n                await LoadSettingsData().then(() => {\r\n                    axios.get(movieRequest).then((response) => {\r\n                        console.log(response.data);\r\n                        setItem(response.data);\r\n                    }).then(() => {\r\n                        setIsLoading(false);\r\n                    }).catch((err) => console.log(err))\r\n                }).catch((err) => console.log(err))\r\n            }\r\n        });\r\n    }, [movieRequest]);\r\n\r\n    function parseDate(date) {\r\n        let options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\r\n        return new Date(date.substring(0, (date.length - 5))).toLocaleDateString(document.getElementById(\"root\")?.getAttribute('locvalue'), options);\r\n    }\r\n\r\n    function getDateTypeName(type) {\r\n        let name;\r\n        switch (type) {\r\n            case 1:\r\n                name = \"Premiere\";\r\n                break;\r\n            case 2:\r\n                name = \"Theatrical (limited)\";\r\n                break;\r\n            case 3:\r\n                name = \"Theatrical\";\r\n                break;\r\n            case 4:\r\n                name = \"Digital\";\r\n                break;\r\n            case 5:\r\n                name = \"Physical\";\r\n                break;\r\n            case 6:\r\n                name = \"TV\";\r\n                break;\r\n            default:\r\n                console.error(\"Wrong Type of Release Date\");\r\n        }\r\n        return name;\r\n    }\r\n\r\n    return (\r\n        !isLoading && <Layout>\r\n            {item.results.map((dateResult, id) => (\r\n                <div key={id} onLoad={handleScreenResize}>\r\n                    <div className=\"flex items-center justify-center font-bold text-[3vh] mt-5\">{dateResult.iso_3166_1}</div>\r\n                    <div className=\"flex items-center justify-center w-screen release_dates_table_parent\">\r\n                        <table id=\"release_dates_table\">\r\n                            <thead>\r\n                            <tr>\r\n                                <th>Certification</th>\r\n                                <th>Release Date</th>\r\n                                <th>Type</th>\r\n                                <th>Language</th>\r\n                                <th>Note</th>\r\n                            </tr></thead>\r\n                            <tbody>\r\n                            {dateResult.release_dates.map((date, id) => (\r\n                                <tr key={id}>\r\n                                    <td>{date.certification}</td>\r\n                                    <td>{parseDate(date.release_date)}</td>\r\n                                    <td>{getDateTypeName(date.type)}</td>\r\n                                    <td>{date.iso_639_1}</td>\r\n                                    <td>{date.note}</td>\r\n                                </tr>\r\n                            ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </Layout>\r\n    )\r\n}"],"names":["MovieReleases","movieId","useParams","movieRequest","requests","useState","item","setItem","isLoading","setIsLoading","handleScreenResize","window","innerWidth","document","getElementById","style","overflowX","querySelectorAll","forEach","el","display","parseDate","date","Date","substring","length","toLocaleDateString","getAttribute","weekday","year","month","day","getDateTypeName","type","name","console","error","onmousedown","addEventListener","useHistory","listen","removeEventListener","useEffect","auth","user","LoadSettingsData","then","axios","response","log","data","catch","err","results","map","dateResult","id","onLoad","className","iso_3166_1","release_dates","certification","release_date","iso_639_1","note"],"sourceRoot":""}